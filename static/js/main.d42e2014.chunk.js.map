{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","fromDigit","setFromDigit","toDigit","setToDigit","range","setRange","number","setNumber","standardRange","chunk","chunkSize","result","i","length","push","slice","onButtonClickChange","e","className","type","min","max","title","onChange","target","value","alert","unshift","map","row","el","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d42e2014.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n    const [fromDigit, setFromDigit] = useState();\r\n    const [toDigit, setToDigit] = useState();\r\n    const [range, setRange] = useState([]);\r\n    const [number, setNumber] = useState(0);\r\n\r\n    const standardRange = [\r\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n        [10, 20, 30, 40, 50, 60, 70, 80, 90],\r\n        [100, 200, 300, 400, 500, 600, 700, 800, 900],\r\n        [1000],\r\n    ];\r\n\r\n    const onChangeFrom = (e) => {\r\n        if (+e.target.value > 0) setFromDigit(+e.target.value);\r\n        const range = [];\r\n        if (+e.target.value < 0 || +e.target.value > 100000) {\r\n            alert(\"Please enter number between 1 and 100000!\");\r\n        } else {\r\n            if (+e.target.value !== 0) {\r\n                for (let i = +e.target.value; i <= +toDigit; i++) {\r\n                    if (i < 10) range.push(i);\r\n                    if (i >= 10 && i < 100 && i % 10 === 0) range.push(i);\r\n                    if (i >= 100 && i < 1000 && i % 100 === 0) range.push(i);\r\n                    if (i >= 1000 && i < 10000 && i % 1000 === 0) range.push(i);\r\n                    if (i >= 10000 && i < 100000 && i % 10000 === 0) range.push(i);\r\n                    if (i > 10 && i === +toDigit && range[range.length - 1] !== +toDigit)\r\n                        range.push(i);\r\n                }\r\n            }\r\n        }\r\n        if (\r\n            +e.target.value > 10 &&\r\n            range[0] !== +e.target.value &&\r\n            +e.target.value < +toDigit\r\n        )\r\n            range.unshift(+e.target.value);\r\n\r\n        setRange(chunk(range, 9));\r\n    };\r\n\r\n    const onChangeTo = (e) => {\r\n        setToDigit(+e.target.value);\r\n        const range = [];\r\n        if (+e.target.value < 0 || +e.target.value > 100000) {\r\n            alert(\"Please enter number between 1 and 100000!\");\r\n        } else {\r\n            if (\r\n                +fromDigit > 10 &&\r\n                +fromDigit % 10 !== 0 &&\r\n                +fromDigit < +e.target.value\r\n            )\r\n                range.push(+fromDigit);\r\n            for (let i = +fromDigit; i <= +e.target.value; i++) {\r\n                if (i < 10) range.push(i);\r\n                if (i >= 10 && i < 100 && i % 10 === 0) range.push(i);\r\n                if (i >= 100 && i < 1000 && i % 100 === 0) range.push(i);\r\n                if (i >= 1000 && i < 10000 && i % 1000 === 0) range.push(i);\r\n                if (i >= 10000 && i < 100000 && i % 10000 === 0) range.push(i);\r\n                if (\r\n                    i === +e.target.value &&\r\n                    +e.target.value > 10 &&\r\n                    range[range.length - 1] !== +e.target.value\r\n                )\r\n                    range.push(i);\r\n            }\r\n        }\r\n        setRange(chunk(range, 9));\r\n    };\r\n\r\n    function chunk(range, chunkSize) {\r\n        let result = [];\r\n        for (let i = 0; i < range.length; i += chunkSize)\r\n            result.push(range.slice(i, i + chunkSize));\r\n        return result;\r\n    }\r\n\r\n    const onButtonClickChange = (e) => {\r\n        setNumber(number + +e);\r\n    };\r\n\r\n    const onButtonResetZero = () => {\r\n        setNumber(0);\r\n    };\r\n\r\n    const onButtonRemoveButtons = () => {\r\n        setRange([]);\r\n    };\r\n\r\n    const onButtonStandardRange = () => {\r\n        setRange(standardRange);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App-content\">\r\n            <div>\r\n                <h4> Please enter \"min\" and \"max\" values to generate buttons. </h4>\r\n                Please use only positive numbers.\r\n                <br />\r\n                min:\r\n                <input\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    max=\"100000\"\r\n                    title=\"Please enter minimum value\"\r\n                    onChange={onChangeFrom}\r\n                />{\" \"}\r\n                max:\r\n                <input\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    max=\"100000\"\r\n                    title=\"Please enter maximum value\"\r\n                    onChange={onChangeTo}\r\n                />\r\n            </div>\r\n            <div className=\"App-buttons\">\r\n                <div className=\"left\">\r\n                    {range.map((row) => (\r\n                        <div>\r\n                            {row.map((el) => (\r\n                                <button key={el} onClick={() => onButtonClickChange(-el)}>\r\n                                    {el + \"-\"}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"center\">\r\n                    <h3>{number}</h3>\r\n                    <button onClick={() => onButtonResetZero()}>Reset to 0</button>\r\n                    <br />\r\n                    <button onClick={() => onButtonRemoveButtons()}>\r\n                        Remove buttons\r\n                    </button>\r\n                    <br />\r\n                    <button onClick={() => onButtonStandardRange()}>\r\n                        Standard range: 1 - 1000\r\n                    </button>\r\n                </div>\r\n                <div className=\"right\">\r\n                    {range.map((row) => (\r\n                        <div>\r\n                            {row.map((el) => (\r\n                                <button key={el} onClick={() => onButtonClickChange(el)}>\r\n                                    {el}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}