{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","fromDigit","setFromDigit","toDigit","setToDigit","range","setRange","number","setNumber","console","log","onButtonClickChange","e","className","type","placeholder","min","title","onChange","target","value","i","push","reverse","map","el","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOAwEeA,MArEf,WAAgB,IAAD,EACuBC,mBAAS,GADhC,mBACJC,EADI,KACOC,EADP,OAEmBF,mBAAS,GAF5B,mBAEJG,EAFI,KAEKC,EAFL,OAGeJ,mBAAS,IAHxB,mBAGJK,EAHI,KAGGC,EAHH,OAIiBN,mBAAS,GAJ1B,mBAIJO,EAJI,KAIIC,EAJJ,KAqBXC,QAAQC,IAAIL,GACZI,QAAQC,IAAI,YAAaT,GAiBzBQ,QAAQC,IAAI,QAASL,GACrBI,QAAQC,IAAI,UAAWP,GAGvB,IAAMQ,EAAsB,SAACC,GACzBJ,EAAUD,EAASK,IAGvB,OAAO,yBAAKC,UAAU,eAClB,6BACI,0FADJ,oCAKI,6BALJ,OAOI,2BAAOC,KAAK,SAASC,YAAY,IAAIC,IAAI,IAAIC,MAAM,4BAA4BC,SAjDlE,SAACN,GAClBV,GAAcU,EAAEO,OAAOC,OACvBX,QAAQC,IAAI,gBAAiBE,EAAEO,OAAOC,OACtCX,QAAQC,IAAI,YAAaT,GACzB,IAAII,EAAQ,GACZ,GAAIO,EAAEO,OAAOC,MAAQ,EACjB,IAAK,IAAIC,GAAKT,EAAEO,OAAOC,MAAOC,GAAKlB,EAASkB,IAC9B,IAANA,GACAhB,EAAMiB,KAAKD,GAKvBf,EAASD,MAqCJ,IARL,OASI,2BAAOS,KAAK,SAASC,YAAY,IAAIC,IAAI,IAAIC,MAAM,0BAA0BC,SAhClE,SAACN,GAChBR,GAAYQ,EAAEO,OAAOC,OACrBX,QAAQC,IAAI,gBAAiBE,EAAEO,OAAOC,OACtCX,QAAQC,IAAI,UAAWP,GACvB,IAAIE,EAAQ,GACZ,GAAIO,EAAEO,OAAOC,MAAQ,EACjB,IAAK,IAAIC,EAAIpB,EAAWoB,IAAMT,EAAEO,OAAOC,MAAOC,IAChC,IAANA,GACAhB,EAAMiB,KAAKD,GAIvBf,EAASD,OAsBT,6BACKA,EAAMkB,UAAUC,KAAI,SAAAC,GAAE,OAAI,4BAAQC,KAAMD,EAAIE,QAAS,kBAAMhB,GAAqBc,KAAtD,KAA8DA,MACxFlB,EACAF,EAAMkB,UAAUC,KAAI,SAAAC,GAAE,OAAI,4BAAQC,IAAKD,EAAIE,QAAS,kBAAMhB,EAAoBc,KAApD,IAA2DA,SCrD9EG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.47914cf4.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css'\n\nfunction App() {\n    const [fromDigit, setFromDigit] = useState(0);\n    const [toDigit, setToDigit] = useState(0);\n    const [range, setRange] = useState([]);\n    const [number, setNumber] = useState(0);\n\n    const onChangeFrom = (e) => {\n        setFromDigit(+e.target.value);\n        console.log('target value', +e.target.value);\n        console.log('fromDigit', fromDigit);\n        let range = [];\n        if (e.target.value > 0) {\n            for (let i = +e.target.value; i <= toDigit; i++) {\n                if (i !== 0) {\n                    range.push(i)\n                }\n            }\n        }\n\n        setRange(range);\n    };\n    console.log(range);\n    console.log('fromDigit', fromDigit);\n\n\n    const onChangeTo = (e) => {\n        setToDigit(+e.target.value);\n        console.log('target value', +e.target.value);\n        console.log('toDigit', toDigit);\n        let range = [];\n        if (e.target.value > 0) {\n            for (let i = fromDigit; i <= +e.target.value; i++) {\n                if (i !== 0) {\n                    range.push(i)\n                }\n            }\n        }\n        setRange(range);\n    };\n    console.log('range', range);\n    console.log('toDigit', toDigit);\n\n\n    const onButtonClickChange = (e) => {\n        setNumber(number + e)\n    };\n\n    return <div className=\"App-content\">\n        <div>\n            <h3> Please enter \"min\" and \"max\" values to generate buttons. </h3>\n\n            Please use only positive numbers.\n\n            <br/>\n            min:\n            <input type=\"number\" placeholder=\"0\" min=\"0\" title=\"Please enter 'from' value\" onChange={onChangeFrom}/>\n            {\" \"}max:\n            <input type=\"number\" placeholder=\"0\" min=\"0\" title=\"Please enter 'to' value\" onChange={onChangeTo}/>\n        </div>\n        <div>\n            {range.reverse().map(el => <button key={-el} onClick={() => onButtonClickChange(-el)}> {-el}</button>)}\n            {number}\n            {range.reverse().map(el => <button key={el} onClick={() => onButtonClickChange(el)}> {el}</button>)}\n        </div>\n\n\n    </div>;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}