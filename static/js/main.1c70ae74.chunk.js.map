{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","fromDigit","setFromDigit","toDigit","setToDigit","range","setRange","number","setNumber","onButtonClickChange","e","className","type","placeholder","min","title","onChange","target","value","i","push","reverse","map","el","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c70ae74.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css'\r\n\r\nfunction App() {\r\n    const [fromDigit, setFromDigit] = useState(0);\r\n    const [toDigit, setToDigit] = useState(0);\r\n    const [range, setRange] = useState([]);\r\n    const [number, setNumber] = useState(0);\r\n\r\n    const onChangeFrom = (e) => {\r\n        setFromDigit(+e.target.value);\r\n        let range = [];\r\n        if (e.target.value > 0 && e.target.value <= 100000) {\r\n            for (let i = +e.target.value; i <= toDigit; i++) {\r\n                if (i !== 0&& i<10) {range.push(i)}\r\n                if (i !== 0&&i<100&&i%10===0) {range.push(i)}\r\n                if (i !== 0&&i<1000&&i%100===0) {range.push(i)}\r\n                if (i !== 0&&i<10000&&i%1000===0) {range.push(i)}\r\n                if (i !== 0&&i<100000&&i%10000===0) {range.push(i)}\r\n\r\n            }\r\n            if (toDigit!== 0&&toDigit>10&&toDigit%10!==0) {range.push(toDigit)}\r\n        }\r\n        setRange(range);\r\n    };\r\n\r\n    const onChangeTo = (e) => {\r\n        setToDigit(+e.target.value);\r\n        let range = [];\r\n        if (e.target.value > 0 && e.target.value <= 100000) {\r\n            for (let i = fromDigit; i <= +e.target.value; i++) {\r\n                if (i !== 0&& i<10) {range.push(i)}\r\n                if (i !== 0&& i<100&&i%10===0) {range.push(i)}\r\n                if (i !== 0&& i<1000&&i%100===0) {range.push(i)}\r\n                if (i !== 0&& i<10000&&i%1000===0) {range.push(i)}\r\n                if (i !== 0&& i<100000&&i%10000===0) {range.push(i)}\r\n            }\r\n            if (+e.target.value!== 0&&+e.target.value>10&&+e.target.value%10!==0) {range.push(+e.target.value)}\r\n        }\r\n\r\n        setRange(range);\r\n    };\r\n\r\n    function chunk(range, chunkSize) {\r\n        let result = [];\r\n        for (let i=0;i<range.length; i+=chunkSize)\r\n            result.push(range.slice(i,i+chunkSize));\r\n        return result;\r\n    }\r\n\r\n\r\n    const onButtonClickChange = (e) => {\r\n        setNumber(number + e)\r\n    };\r\n\r\n    const onButtonReset = () => {\r\n        setNumber(0)\r\n    }\r\n\r\n    return <div className=\"App-content\">\r\n        <div>\r\n            <h3> Please enter \"min\" and \"max\" values to generate buttons. </h3>\r\n\r\n            Please use only positive numbers.\r\n\r\n            <br/>\r\n            min:\r\n            <input type=\"number\" placeholder=\"0\" min=\"0\" title=\"Please enter minimum value\" onChange={onChangeFrom}/>\r\n            {\" \"}max:\r\n            <input type=\"number\" placeholder=\"0\" min=\"0\" title=\"Please enter maximum value\" onChange={onChangeTo}/>\r\n        </div>\r\n        <div className=\"App-buttons\">\r\n            <div className = \"left\">\r\n            {range.reverse().map(el => <button key={-el} onClick={() => onButtonClickChange(-el)}> {-el}</button>)}\r\n            </div>\r\n            <div className =\"center\">\r\n            {number} <br/>\r\n            <button onClick={() => onButtonReset()}>Reset</button>\r\n            </div>\r\n            <div className=\"right\">\r\n            {range.reverse().map(el => <button key={el} onClick={() => onButtonClickChange(el)}> {el}</button>)}\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>;\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}